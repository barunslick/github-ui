{"version":3,"sources":["serviceWorker.js","components/Avatar/Avatar.jsx","services/githubApi.js","components/Socials/Socials.jsx","actions/profileActions.js","components/Contacts/Contacts.jsx","components/Profile/Profile.jsx","components/Repositoires/RespositoryListItem/RepositoryListItem.jsx","components/Repositoires/Repositores.jsx","actions/repoActions.js","components/Main/Main.jsx","constants/apiUrl.js","App.js","reducers/profileActionReducers.js","reducers/reposActionReducers.js","reducers/index.js","store.js","index.js"],"names":["Boolean","window","location","hostname","match","connect","state","imageUrl","mainData","data","avatar_url","props","className","src","alt","fetchContent","url","a","fetch","then","response","json","catch","error","result","followersUrl","followers_url","followingUrl","following_url","followersCount","Object","keys","followers","length","followingCount","following","dispatch","setFollowing","fetchedData","type","payload","setFollowers","useEffect","fetchFollowers","fetchFollowings","actuatlFollowingUrl","split","blogLink","blog","address","href","name","gitId","login","RepositoryLIstItem","item","html_url","title","language","moment","updated_at","fromNow","reposUrl","repos_url","reposData","repos","setRepos","useState","isLoading","setIsLoding","fetchRepos","style","color","map","key","id","setMainData","fetchData","path","component","Profile","Repositores","App","INITIAL_STATE","profileActionReducer","action","reposActionReducer","reducer","combineReducers","profileActionReducers","reposActionReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.df3829c9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\n/**\n * Returns the avatar of the user.\n *\n * @param {props} props\n * @returns {JSX} Image JSX of the user.\n */\nfunction Avatar(props) {\n  return (\n    <img className = { props.className } src = { props.imageUrl } alt=\"Profile\"></img>\n  );\n}\n\n/**\n * Sends required data from state to props of component.\n *\n * @param {Object} state\n * @returns\n */\nfunction mapStateToProps(state) {\n  return {\n    imageUrl: state.mainData.data.avatar_url\n  };\n}\n\nAvatar.propTypes = {\n  className: PropTypes.string,\n  imageUrl: PropTypes.string\n};\n\nexport default connect(mapStateToProps)(Avatar);\n","/**\n * Gets a url and fetches content.\n * \n * @param {String} url An api endoint.\n * @returns {JSON} Json data if no error is found.\n */\nexport default async function fetchContent(url) {\n  \n  const result = await fetch(url)\n    .then(response => response.json())\n    .then(data => data)\n    .catch(error => {\n      throw (error);\n    });\n\n  return result;\n\n}\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\n\nimport fetchContent from '../../services/githubApi';\nimport * as profileActions from '../../actions/profileActions';\n\nimport './Socials.scss';\n\n/**\n * Shows the number of followers and following.\n * \n * @param {Object} props\n * @returns\n */\nfunction Socials(props) {\n\n  const { followersUrl, followingUrl, followersCount, followingCount, setFollowing, setFollowers } = props;\n\n  useEffect(() => {\n\n    const fetchFollowers = async () => {\n      const followers = await fetchContent(followersUrl);\n\n      if (followers) {\n        setFollowers(followers);\n      }\n    };\n\n    const fetchFollowings = async (actuatlFollowingUrl) => {\n      const following = await fetchContent(actuatlFollowingUrl);\n\n      if (following) {\n        setFollowing(following);\n      }\n    };\n\n    if (followersUrl) {\n      fetchFollowers();\n    }\n    if (followingUrl) {\n      const actuatlFollowingUrl = followingUrl.split('{')[0];\n\n      fetchFollowings(actuatlFollowingUrl);\n    }\n\n    // eslint-disable-next-line\n  }, [ followersUrl, followingUrl ]);\n\n\n\n  return (\n    <div className=\"Socials\">\n      <div className=\"Socials__followers\">\n        <p><span className=\"spray\">{followersCount}</span> Followers</p>\n      </div>\n      <div className=\"Socials__following\">\n        <p><span className=\"spray\">{followingCount}</span> Following</p>\n      </div>\n    </div>\n  );\n}\n\n/**\n * Sends required data from state to props of component.\n *\n * @param {Object} state\n * @returns\n */\nfunction mapStateToProps(state) {\n  return {\n    followersUrl: state.mainData.data.followers_url,\n    followingUrl: state.mainData.data.following_url,\n    followersCount: Object.keys(state.mainData.followers).length,\n    followingCount: Object.keys(state.mainData.following).length,\n  };\n}\n\n/**\n * Take store.dispatch and map it as props to our component.\n *\n * @param {*} dispatch\n */\nfunction mapDisptachToProps(dispatch) {\n  return {\n    setFollowing: fetchedData => dispatch(profileActions.setFollowing(fetchedData)),\n    setFollowers: fetchedData => dispatch(profileActions.setFollowers(fetchedData)),\n  };\n}\n\nSocials.propTypes = {\n  followersUrl: PropTypes.string,\n  followingUrl: PropTypes.string,\n  followersCount: PropTypes.number,\n  followingCount: PropTypes.number,\n  setFollowing: PropTypes.func,\n  setFollowers: PropTypes.func\n};\n\nexport default connect(mapStateToProps, mapDisptachToProps)(Socials);\n","export const SET_DATA = 'SET_DATA';\nexport const SET_FOLLOWING = 'SET_FOLLOWING';\nexport const SET_FOLLOWERS = 'SET_FOLLOWERS';\n\nexport const setData = jsonData => ({\n  type: SET_DATA,\n  payload: jsonData\n});\n\nexport const setFollowing = jsonData => ({\n  type: SET_FOLLOWING,\n  payload: jsonData\n});\n\nexport const setFollowers = jsonData => ({\n  type: SET_FOLLOWERS,\n  payload: jsonData\n});\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport './contacts.scss';\n\n/**\n * Shows the contact details of the user.\n * \n * @param {Object} props\n * @returns\n */\nfunction Contacts(props) {\n\n  const { blogLink, address } = props;\n\n  return (\n    <div className=\"Contacts\">\n      <div><a href={blogLink}><i className=\"fas fa-link icons\"></i><span className=\"Contacts__text-content\">{blogLink}</span></a></div>\n      <div><i className=\"fas fa-map-marker-alt icons\"></i><span className=\"Contacts__text-content\">{address}</span></div>\n    </div>\n  );\n}\n\n/**\n * Sends required data from state to props of component.\n *\n * @param {Object} state\n * @returns\n */\nfunction mapStateToProps(state) {\n  return {\n    blogLink: state.mainData.data.blog,\n    address: state.mainData.data.location,\n  };\n}\n\nContacts.propTypes = {\n  blogLink: PropTypes.string,\n  address: PropTypes.string\n};\n\nexport default connect(mapStateToProps)(Contacts);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport './profile.scss';\nimport Avatar from '../Avatar/Avatar';\nimport Socials from '../Socials/Socials';\nimport Contacts from '../Contacts/Contacts';\n\n/**\n * Shows the user avatar along with details such as name, followers, and other details.\n * \n * @param {Object} props\n * @returns\n */\nfunction Profile(props) {\n\n  const { name, gitId, url } = props;\n\n  return (\n    <div className=\"Profile\">\n      <span className=\"Profile__heading\"> {`// Profile --------------------------------------------------------------------------------------------------------------`}</span>\n      <div className=\"Profile__avatar-container\">\n        <Avatar className=\"Profile__avatar\" />\n      </div>\n      <div className=\"Profile__user-details\">\n        <a href = {url}><h1 className=\"Profile__user-name\"> {name} </h1></a>\n        <a href = {url}><p className=\"Profile__user-id\"> {gitId} </p> </a>\n      </div>\n      <Socials />\n      <Contacts />\n    </div>\n  );\n}\n\n/**\n * Sends required data from state to props of component.\n *\n * @param {Object} state\n * @returns\n */\nfunction mapStateToProps(state) {\n  return {\n    name: state.mainData.data.name,\n    gitId: state.mainData.data.login,\n    url: state.mainData.data.url,\n  };\n}\n\nProfile.propTypes = {\n  name: PropTypes.string,\n  gitId: PropTypes.string,\n  url: PropTypes.string,\n};\n\nexport default connect(mapStateToProps)(Profile);\n","import React from 'react';\nimport moment from 'moment';\nimport { PropTypes } from 'prop-types';\n\n\nimport './RepositoryListItem.scss';\n\n/**\n * Displays the details of repository.\n *\n * @param {Object} props\n * @returns\n */\nfunction RepositoryLIstItem(props) {\n  return (\n    <div className=\"Repository-list\">\n      <div className=\"Repository-list__title\">\n        <a href={props.item.html_url} title={props.item.name}>{props.item.name}</a>\n      </div>\n      <div className=\"Repository-list__details\">\n        {props.item.language &&\n          <div className=\"Repository-list__language\">\n            [{props.item.language}]\n          </div>\n        }\n        <div className=\"Repository-list__update-time\">\n          [Updated: {moment(props.item.updated_at).fromNow()}]\n        </div>\n      </div>\n    </div>\n  );\n}\n\nRepositoryLIstItem.propTypes = {\n  item: PropTypes.object,\n};\n\nexport default RepositoryLIstItem;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport './repositories.scss';\nimport fetchContent from '../../services/githubApi';\nimport * as reposActions from '../../actions/repoActions';\nimport RepositoryListItem from './RespositoryListItem/RepositoryListItem';\n\n/**\n * Shows the repositores of the user.\n * \n * @param {Object} props\n * @returns {JSX} Contains the jsx to show user respositories.\n */\nfunction Repositores(props) {\n\n  const [isLoading, setIsLoding] = useState(true);\n\n  const { reposUrl, setRepos, reposData } = props;\n\n  useEffect(() => {\n\n    const fetchRepos = async () => {\n      const result = await fetchContent(reposUrl);\n\n      if (result) {\n        setRepos(result);\n        setIsLoding(false);\n      }\n\n    };\n\n    if (reposUrl) {\n      fetchRepos();\n    }\n\n    // eslint-disable-next-line\n  }, [reposUrl]);\n\n\n  return (\n    <div className=\"Repositories\">\n      <span className=\"Repositories__heading\"> {`// Repositories ---------------------------------------------------------------------------------------------------------------------------------`}</span>\n      {isLoading ?\n        <p style={ { color: 'red' } }>Loading....</p>\n        :\n        <div className = \"Repositories__list-container\">\n          { reposData.map( item=> <RepositoryListItem key={item.id} item={item}/>) }\n        </div>\n      }\n    </div>\n  );\n}\n\n/**\n * Sends required data from state to props of component.\n *\n * @param {Object} state\n * @returns\n */\nfunction mapStateToProps(state) {\n  return {\n    reposUrl: state.mainData.data.repos_url,\n    reposData: state.repos.reposData,\n  };\n}\n\n/**\n * Take store.dispatch and map it as props to our component.\n *\n * @param {*} dispatch\n */\nfunction mapDisptachToProps(dispatch) {\n  return {\n    setRepos: fetchedData => dispatch(reposActions.setRepos(fetchedData)),\n  };\n}\n\nRepositores.propTypes = {\n  reposUrl: PropTypes.string,\n  setRepos: PropTypes.func,\n  reposData: PropTypes.array,\n};\n\nexport default connect(mapStateToProps, mapDisptachToProps)(Repositores);\n","export const SET_REPOS = 'SET_REPOS';\n\nexport const setRepos = jsonData => ({\n  type: SET_REPOS,\n  payload: jsonData\n});\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport Profile from '../Profile/Profile';\nimport { BASE_URL } from '../../constants/apiUrl';\nimport fetchContent from '../../services/githubApi';\nimport Repositores from '../Repositoires/Repositores';\nimport * as profileActions from '../../actions/profileActions';\n\nimport '../../style/style.scss';\nimport '../../style/reset.scss';\n\n\n/**\n * Main App wrapper.\n * \n * @param {Object} props\n * @returns {JSX} \n */\nfunction Main(props) {\n\n  const { setMainData } = props;\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await fetchContent(BASE_URL);\n\n      if (result) {\n        setMainData(result);\n      }\n      \n    };\n\n    fetchData();\n\n  // eslint-disable-next-line\n  }, []);\n\n  return (\n    <Router>\n      <div className=\"MainWrapper\">\n        <div className=\"Content\">\n          <Route path=\"/\" component={Profile} />\n          <Route path=\"/\" component={Repositores} />\n        </div>\n      </div>\n    </Router>\n  );\n}\n\n/**\n * Take store.dispatch and map it as props to our component.\n *\n * @param {*} dispatch\n */\nfunction mapDisptachToProps(dispatch) {\n  return {\n    setMainData: fetchedData => dispatch(profileActions.setData(fetchedData)),\n  };\n}\n\nMain.propTypes = {\n  setMainData: PropTypes.func\n};\n\nexport default connect(null, mapDisptachToProps)(Main);\n","export const BASE_URL = 'https://api.github.com/users/barunslick';\n","import React from 'react';\nimport Main from './components/Main/Main';\n\nimport './App.css';\n\n/**\n * Main App wrapper.\n * \n * @returns {JSX} \n */\nfunction App() {\n  return (\n    <Main />\n  );\n}\n\nexport default App;\n","import * as profileActions from '../actions/profileActions';\n\nconst INITIAL_STATE = {\n  data: {},\n  followers: {},\n  following: {}\n};\n\n/**\n * Performs action based on given payload ,i.e fetched data from an api and returns new state.\n *\n * @param {Object} state Current State.\n * @param {String} action Takes the action that has been dispatched.\n * @returns\n */\nfunction profileActionReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case profileActions.SET_DATA:\n      return {\n        ...state,\n        data: action.payload\n      };\n\n    case profileActions.SET_FOLLOWING:\n      return {\n        ...state,\n        following: action.payload\n      };\n\n    case profileActions.SET_FOLLOWERS:\n      return {\n        ...state,\n        followers: action.payload\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default profileActionReducer;\n","import * as repoActions from '../actions/repoActions';\n\nconst INITIAL_STATE = {\n  reposData: []\n};\n\n/**\n * Performs action based on given payload ,i.e fetched data from an api and returns new state.\n *\n * @param {Object} state Current State.\n * @param {String} action Takes the action that has been dispatched.\n * @returns\n */\nfunction reposActionReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case repoActions.SET_REPOS:\n      return {\n        ...state,\n        reposData: action.payload\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default reposActionReducer;\n","import { combineReducers } from 'redux';\n\nimport profileActionReducers from './profileActionReducers';\nimport reposActionReducers from './reposActionReducers.js';\n\nconst reducer = combineReducers({\n  mainData: profileActionReducers,\n  repos: reposActionReducers,\n});\n\nexport default reducer;\n","import { createStore } from 'redux';\n\nimport reducer from './reducers';\n/* const INITIAL_VALUE = []; */\n\nconst store = createStore(reducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()); \n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\nimport App from './App';\nimport store from './store';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store= {store} >\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}