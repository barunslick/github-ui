{"version":3,"sources":["serviceWorker.js","components/Avatar/Avatar.jsx","services/githubApi.js","components/Socials/Socials.jsx","actions/profileActions.js","constants/route.js","components/Contacts/Contacts.jsx","components/Profile/Profile.jsx","components/Following/FollowingListItem/FollowingListItem.jsx","components/Following/Following.jsx","components/Followers/FollowerListItem/FollowerListItem.jsx","components/Followers/Followers.jsx","components/Repositoires/RespositoryListItem/RepositoryListItem.jsx","components/Repositoires/Repositores.jsx","actions/repoActions.js","components/Main/Main.jsx","constants/apiUrl.js","App.js","reducers/profileActionReducers.js","reducers/reposActionReducers.js","reducers/index.js","store.js","index.js"],"names":["Boolean","window","location","hostname","match","connect","state","imageUrl","mainData","data","avatar_url","props","className","src","alt","fetchContent","url","a","fetch","then","response","json","catch","error","result","followersUrl","followers_url","followingUrl","following_url","followersCount","Object","keys","followers","length","followingCount","following","dispatch","setFollowing","fetchedData","type","payload","setFollowers","useEffect","fetchFollowers","fetchFollowings","actuatlFollowingUrl","split","to","blogLink","blog","address","href","name","gitId","login","html_url","FollowingListItem","titel","map","key","id","FollowerLisItem","follower","FollowerListItem","RepositoryListItem","item","title","description","language","moment","updated_at","fromNow","reposUrl","repos_url","reposData","repos","setRepos","useState","isLoading","setIsLoding","fetchRepos","setMainData","setLoading","fetchData","path","exact","component","Repositores","Followers","Following","App","INITIAL_STATE","profileActionReducer","action","reposActionReducer","reducer","combineReducers","profileActionReducers","reposActionReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.069ea2c7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\n/**\n * Returns the avatar of the user.\n *\n * @param {props} props\n * @returns {JSX} Image JSX of the user.\n */\nfunction Avatar(props) {\n  return (\n    <img className = { props.className } src = { props.imageUrl } alt=\"Profile\"></img>\n  );\n}\n\n/**\n * Sends required data from state to props of component.\n *\n * @param {Object} state\n * @returns\n */\nfunction mapStateToProps(state) {\n  return {\n    imageUrl: state.mainData.data.avatar_url\n  };\n}\n\nAvatar.propTypes = {\n  className: PropTypes.string,\n  imageUrl: PropTypes.string\n};\n\nexport default connect(mapStateToProps)(Avatar);\n","/**\n * Gets a url and fetches content.\n * \n * @param {String} url An api endoint.\n * @returns {JSON} Json data if no error is found.\n */\nexport default async function fetchContent(url) {\n  \n  const result = await fetch(url)\n    .then(response => response.json())\n    .then(data => data)\n    .catch(error => {\n      throw (error);\n    });\n\n  return result;\n\n}\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\n\nimport fetchContent from '../../services/githubApi';\nimport * as profileActions from '../../actions/profileActions';\nimport * as routeUrls from '../../constants/route';\n\nimport './Socials.scss';\n\n/**\n * Shows the number of followers and following.\n * \n * @param {Object} props\n * @returns\n */\nfunction Socials(props) {\n\n  const { followersUrl, followingUrl, followersCount, followingCount, setFollowing, setFollowers } = props;\n\n  useEffect(() => {\n\n    const fetchFollowers = async () => {\n      const followers = await fetchContent(followersUrl);\n\n      if (followers) {\n        setFollowers(followers);\n      }\n    };\n\n    const fetchFollowings = async (actuatlFollowingUrl) => {\n      const following = await fetchContent(actuatlFollowingUrl);\n\n      if (following) {\n        setFollowing(following);\n      }\n    };\n\n    if (followersUrl) {\n      fetchFollowers();\n    }\n    if (followingUrl) {\n      const actuatlFollowingUrl = followingUrl.split('{')[0];\n\n      fetchFollowings(actuatlFollowingUrl);\n    }\n\n    // eslint-disable-next-line\n  }, [followersUrl, followingUrl]);\n\n\n\n  return (\n    <div className=\"Socials\">\n      <div className=\"Socials__followers\">\n        <p>\n          <Link to={routeUrls.FOLLOWERS}>\n            <span className=\"spray\">{followersCount}</span> Followers\n          </Link>\n        </p>\n      </div >\n      <div className=\"Socials__following\">\n        <p>\n          <Link to={routeUrls.FOLLOWING}>\n            <span className=\"spray\">{followingCount}</span> Following\n          </Link>\n        </p>\n      </div>\n    </div >\n  );\n}\n\n/**\n * Sends required data from state to props of component.\n *\n * @param {Object} state\n * @returns\n */\nfunction mapStateToProps(state) {\n  return {\n    followersUrl: state.mainData.data.followers_url,\n    followingUrl: state.mainData.data.following_url,\n    followersCount: Object.keys(state.mainData.followers).length,\n    followingCount: Object.keys(state.mainData.following).length,\n  };\n}\n\n/**\n * Take store.dispatch and map it as props to our component.\n *\n * @param {*} dispatch\n */\nfunction mapDisptachToProps(dispatch) {\n  return {\n    setFollowing: fetchedData => dispatch(profileActions.setFollowing(fetchedData)),\n    setFollowers: fetchedData => dispatch(profileActions.setFollowers(fetchedData)),\n  };\n}\n\nSocials.propTypes = {\n  followersUrl: PropTypes.string,\n  followingUrl: PropTypes.string,\n  followersCount: PropTypes.number,\n  followingCount: PropTypes.number,\n  setFollowing: PropTypes.func,\n  setFollowers: PropTypes.func\n};\n\nexport default connect(mapStateToProps, mapDisptachToProps)(Socials);\n","export const SET_DATA = 'SET_DATA';\nexport const SET_FOLLOWING = 'SET_FOLLOWING';\nexport const SET_FOLLOWERS = 'SET_FOLLOWERS';\n\nexport const setData = jsonData => ({\n  type: SET_DATA,\n  payload: jsonData\n});\n\nexport const setFollowing = jsonData => ({\n  type: SET_FOLLOWING,\n  payload: jsonData\n});\n\nexport const setFollowers = jsonData => ({\n  type: SET_FOLLOWERS,\n  payload: jsonData\n});\n\n","export const BASE = '/';\nexport const FOLLOWERS = '/followers';\nexport const FOLLOWING = '/following';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport './contacts.scss';\n\n/**\n * Shows the contact details of the user.\n * \n * @param {Object} props\n * @returns\n */\nfunction Contacts(props) {\n\n  const { blogLink, address } = props;\n\n  return (\n    <div className=\"Contacts\">\n      <div><i className=\"fas fa-link icons\"></i><span className=\"Contacts__text-content\"><a href={`http://${blogLink}`}>{blogLink}</a></span></div>\n      <div><i className=\"fas fa-map-marker-alt icons\"></i><span className=\"Contacts__text-content\">{address}</span></div>\n    </div>\n  );\n}\n\n/**\n * Sends required data from state to props of component.\n *\n * @param {Object} state\n * @returns\n */\nfunction mapStateToProps(state) {\n  return {\n    blogLink: state.mainData.data.blog,\n    address: state.mainData.data.location,\n  };\n}\n\nContacts.propTypes = {\n  blogLink: PropTypes.string,\n  address: PropTypes.string\n};\n\nexport default connect(mapStateToProps)(Contacts);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\nimport './profile.scss';\nimport Avatar from '../Avatar/Avatar';\nimport Socials from '../Socials/Socials';\nimport Contacts from '../Contacts/Contacts';\nimport * as routeUrls from '../../constants/route';\n\n/**\n * Shows the user avatar along with details such as name, followers, and other details.\n * \n * @param {Object} props\n * @returns\n */\nfunction Profile(props) {\n\n  const { name, gitId, url } = props;\n\n  return (\n    <div className=\"Profile\">\n      <span className=\"Profile__heading\"> {`// Profile --------------------------------------------------------------------------------------------------------------`}</span>\n      <div className=\"Profile__avatar-container\">\n        <Avatar className=\"Profile__avatar\" />\n      </div>\n      <div className=\"Profile__user-details\">\n        <Link to={routeUrls.BASE}>\n          <h1 className=\"Profile__user-name\">{name}</h1>\n        </Link>\n        <p className=\"Profile__user-id\"> <a href = {url}>{gitId}</a> </p>\n      </div>\n      <Socials />\n      <Contacts />\n    </div>\n  );\n}\n\n/**\n * Sends required data from state to props of component.\n *\n * @param {Object} state\n * @returns\n */\nfunction mapStateToProps(state) {\n  return {\n    name: state.mainData.data.name,\n    gitId: state.mainData.data.login,\n    url: state.mainData.data.html_url,\n  };\n}\n\nProfile.propTypes = {\n  name: PropTypes.string,\n  gitId: PropTypes.string,\n  url: PropTypes.string,\n};\n\nexport default connect(mapStateToProps)(Profile);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './followingListItem.scss';\n\n/**\n * Shows the details of the follower.\n * \n * @param {Object} props\n * @returns {JSX} Contains the jsx to show user respositories.\n */\nfunction FollowingListItem(props) {\n\n  const { following } = props;\n\n  return (\n    <div className=\"FollowingListItem\">\n      <div className=\"FollowingListItem__avatar-holder\">\n        <img className=\"FollowingListItem__avatar\" src={following.avatar_url} alt={following.login}></img>\n      </div>\n      <div className=\"FollowingListItem__user-details\">\n        <p className=\"FollowingListItem__user-id\"><a href={following.html_url} titel={following.login}>{following.login}</a></p>\n      </div>\n    </div>\n  );\n}\n\nFollowingListItem.propTypes = {\n  following: PropTypes.object,\n};\n\nexport default FollowingListItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport './following.scss';\nimport FollowingListItem from './FollowingListItem/FollowingListItem';\n\n/**\n * Shows the following acoount by the user account.\n *\n * @param {Object} props\n * @returns\n */\nfunction Following(props) {\n\n  const { following } = props;\n\n  return (\n    <div className=\"Following\">\n      <span className=\"Following__heading\"> {`// Following --------------------------------------------------------------------------------------------------------------`}</span>\n      <div className=\"Following__list-container\">\n        {following && following.map(following => <FollowingListItem key={following.id} following={following} />)}\n      </div>\n    </div>\n  );\n}\n\n/**\n * Sends required data from state to props of component.\n *\n * @param {Object} state\n * @returns\n */\nfunction mapStateToProps(state) {\n  return {\n    following: state.mainData.following\n  };\n}\n\nFollowing.propTypes = {\n  following: PropTypes.array,\n};\n\nexport default connect(mapStateToProps)(Following);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './followerListItem.scss';\n\n/**\n * Shows the details of the follower.\n * \n * @param {Object} props\n * @returns {JSX} Contains the jsx to show user respositories.\n */\nfunction FollowerLisItem(props) {\n\n  const { follower } = props;\n\n  return (\n    <div className=\"FollowerListItem\">\n      <div className=\"FollowerListItem__avatar-holder\">\n        <img className=\"FollowerListItem__avatar\" src={follower.avatar_url} alt={follower.login}></img>\n      </div>\n      <div className=\"FollowerListItem__user-details\">\n        <p className=\"FollowerListItem__user-id\"><a href={follower.html_url} titel={follower.login}>{follower.login}</a></p>\n      </div>\n    </div>\n  );\n}\n\nFollowerLisItem.propTypes = {\n  follower: PropTypes.object,\n};\n\nexport default FollowerLisItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport './followers.scss';\nimport FollowerListItem from './FollowerListItem/FollowerListItem';\n\n/**\n * Shows the followers of the user account.\n *\n * @param {Object} props\n * @returns\n */\nfunction Followers(props) {\n\n  const { followers } = props;\n\n  return (\n    <div className=\"Followers\">\n      <span className=\"Followers__heading\"> {`// Followers --------------------------------------------------------------------------------------------------------------`}</span>\n      <div className=\"Followers__list-container\">\n        {followers && followers.map(follower => <FollowerListItem key={follower.id} follower={follower}/> )}\n      </div>\n    </div>\n  );\n}\n\n/**\n * Sends required data from state to props of component.\n *\n * @param {Object} state\n * @returns\n */\nfunction mapStateToProps(state) {\n  return {\n    followers: state.mainData.followers\n  };\n}\n\nFollowers.propTypes = {\n  followers: PropTypes.array,\n};\n\nexport default connect(mapStateToProps)(Followers);\n","import React from 'react';\nimport moment from 'moment';\nimport { PropTypes } from 'prop-types';\n\n\nimport './RepositoryListItem.scss';\n\n/**\n * Displays the details of repository.\n *\n * @param {Object} props\n * @returns\n */\nfunction RepositoryListItem(props) {\n  return (\n    <div className=\"Repository-list\">\n      <div className=\"Repository-list__title\">\n        <a href={props.item.html_url} title={props.item.name}>{props.item.name}</a>\n      </div>\n      {props.item.description &&\n        <div className=\"Repository-list__description\">\n          {props.item.description}\n        </div>\n      }\n      <div className=\"Repository-list__details\">\n        {props.item.language &&\n          <div className=\"Repository-list__language\">\n            [{props.item.language}]\n          </div>\n        }\n        <div className=\"Repository-list__update-time\">\n          [Updated: {moment(props.item.updated_at).fromNow()}]\n        </div>\n      </div>\n    </div>\n  );\n}\n\nRepositoryListItem.propTypes = {\n  item: PropTypes.object,\n};\n\nexport default RepositoryListItem;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport './repositories.scss';\nimport fetchContent from '../../services/githubApi';\nimport * as reposActions from '../../actions/repoActions';\nimport RepositoryListItem from './RespositoryListItem/RepositoryListItem';\n\n/**\n * Shows the repositores of the user.\n * \n * @param {Object} props\n * @returns {JSX} Contains the jsx to show user respositories.\n */\nfunction Repositores(props) {\n\n  const [isLoading, setIsLoding] = useState(true);\n\n  const { reposUrl, setRepos, reposData } = props;\n\n  useEffect(() => {\n\n    const fetchRepos = async () => {\n      const result = await fetchContent(reposUrl);\n\n      if (result) {\n        setRepos(result);\n        setIsLoding(false);\n      }\n\n    };\n\n    if (reposUrl) {\n      fetchRepos();\n    }\n\n    // eslint-disable-next-line\n  }, [reposUrl]);\n\n\n  return (\n    <div className=\"Repositories\">\n      <span className=\"Repositories__heading\"> {`// Repositories ---------------------------------------------------------------------------------------------------------------------------------`}</span>\n      {isLoading ?\n        <p>Loading....</p>\n        :\n        <div className = \"Repositories__list-container\">\n          { reposData.map( item=> <RepositoryListItem key={item.id} item={item}/>) }\n        </div>\n      }\n    </div>\n  );\n}\n\n/**\n * Sends required data from state to props of component.\n *\n * @param {Object} state\n * @returns\n */\nfunction mapStateToProps(state) {\n  return {\n    reposUrl: state.mainData.data.repos_url,\n    reposData: state.repos.reposData,\n  };\n}\n\n/**\n * Take store.dispatch and map it as props to our component.\n *\n * @param {*} dispatch\n */\nfunction mapDisptachToProps(dispatch) {\n  return {\n    setRepos: fetchedData => dispatch(reposActions.setRepos(fetchedData)),\n  };\n}\n\nRepositores.propTypes = {\n  reposUrl: PropTypes.string,\n  setRepos: PropTypes.func,\n  reposData: PropTypes.array,\n};\n\nexport default connect(mapStateToProps, mapDisptachToProps)(Repositores);\n","export const SET_REPOS = 'SET_REPOS';\n\nexport const setRepos = jsonData => ({\n  type: SET_REPOS,\n  payload: jsonData\n});\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport Profile from '../Profile/Profile';\nimport { BASE_URL } from '../../constants/apiUrl';\nimport fetchContent from '../../services/githubApi';\n\nimport Following from '../Following/Following';\nimport Followers from '../Followers/Followers';\nimport Repositores from '../Repositoires/Repositores';\nimport * as profileActions from '../../actions/profileActions';\nimport * as routeUrls from '../../constants/route';\n\n\nimport '../../style/style.scss';\nimport '../../style/reset.scss';\n\n\n/**\n * Main App wrapper.\n * \n * @param {Object} props\n * @returns {JSX} \n */\nfunction Main(props) {\n\n  const [isLoading, setLoading] = useState(true);\n\n  const { setMainData } = props;\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await fetchContent(BASE_URL);\n\n      if (result) {\n        setMainData(result);\n        setLoading(false);\n      }\n\n    };\n\n    fetchData();\n\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <Router>\n      <div className=\"MainWrapper\">\n        <div className=\"Content\">\n          {isLoading ?\n            <p>Laoding.....</p>\n            :\n            <>\n              <Profile />\n              <Switch>\n                <Route path={routeUrls.BASE} exact component={Repositores} />\n                <Route path={routeUrls.FOLLOWERS} exact component={Followers} />\n                <Route path={routeUrls.FOLLOWING} exact component={Following} />\n              </Switch>\n            </>\n          }\n\n        </div>\n      </div>\n    </Router>\n  );\n}\n\n/**\n * Take store.dispatch and map it as props to our component.\n *\n * @param {*} dispatch\n */\nfunction mapDisptachToProps(dispatch) {\n  return {\n    setMainData: fetchedData => dispatch(profileActions.setData(fetchedData)),\n  };\n}\n\nMain.propTypes = {\n  setMainData: PropTypes.func\n};\n\nexport default connect(null, mapDisptachToProps)(Main);\n","export const BASE_URL = 'https://api.github.com/users/barunslick';\n","import React from 'react';\nimport Main from './components/Main/Main';\n\nimport './App.css';\n\n/**\n * Main App wrapper.\n * \n * @returns {JSX} \n */\nfunction App() {\n  return (\n    <Main />\n  );\n}\n\nexport default App;\n","import * as profileActions from '../actions/profileActions';\n\nconst INITIAL_STATE = {\n  data: {},\n  followers: [],\n  following: []\n};\n\n/**\n * Performs action based on given payload ,i.e fetched data from an api and returns new state.\n *\n * @param {Object} state Current State.\n * @param {String} action Takes the action that has been dispatched.\n * @returns\n */\nfunction profileActionReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case profileActions.SET_DATA:\n      return {\n        ...state,\n        data: action.payload\n      };\n\n    case profileActions.SET_FOLLOWING:\n      return {\n        ...state,\n        following: action.payload\n      };\n\n    case profileActions.SET_FOLLOWERS:\n      return {\n        ...state,\n        followers: action.payload\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default profileActionReducer;\n","import * as repoActions from '../actions/repoActions';\n\nconst INITIAL_STATE = {\n  reposData: []\n};\n\n/**\n * Performs action based on given payload ,i.e fetched data from an api and returns new state.\n *\n * @param {Object} state Current State.\n * @param {String} action Takes the action that has been dispatched.\n * @returns\n */\nfunction reposActionReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case repoActions.SET_REPOS:\n      return {\n        ...state,\n        reposData: action.payload\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default reposActionReducer;\n","import { combineReducers } from 'redux';\n\nimport profileActionReducers from './profileActionReducers';\nimport reposActionReducers from './reposActionReducers.js';\n\nconst reducer = combineReducers({\n  mainData: profileActionReducers,\n  repos: reposActionReducers,\n});\n\nexport default reducer;\n","import { createStore } from 'redux';\n\nimport reducer from './reducers';\n/* const INITIAL_VALUE = []; */\n\nconst store = createStore(reducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()); \n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\nimport App from './App';\nimport store from './store';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store= {store} >\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}