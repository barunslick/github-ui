{"version":3,"sources":["index.css","profile.scss","../../style/partials/_utilities.scss","../../style/partials/_config.scss","Socials.scss","contacts.scss","following.scss","followingListItem.scss","../../../style/partials/_utilities.scss","../../../style/partials/_config.scss","followers.scss","followerListItem.scss","repositories.scss","RepositoryListItem.scss","style.scss","partials/_config.scss","partials/_utilities.scss","reset.scss"],"names":[],"mappings":"AAAA,KACE,kCAAmC,CACnC,iCACF,CAEA,KACE,yEAEF,CCNA,SAEE,UAAW,CACX,eAAgB,CAyCjB,yBA5CD,SAMI,SAAU,CACV,QAAO,CACP,eAAgB,CAoCnB,CC4DC,kBD5FE,kBAAmB,CACnB,UEsCc,CDqDhB,iBDvFE,iBAAkB,CAClB,UAAW,CCsFb,2BDjFE,kBAAgB,CAChB,eAAgB,CCgFlB,uBD5EE,eAAgB,CC4ElB,kBDxEE,cAAe,CCwEjB,oBDpEE,aEOU,CFJR,4BACE,uBAAqD,CGxC7D,SAEE,eAAgB,CAChB,YAAa,CFqGb,wCE/FE,QAAM,CATV,gBAaI,aDiCW,CChCX,cAAe,CAdnB,iBAmBM,aAA4C,CCnBlD,UAEE,eAAgB,CAFlB,cAKI,eAAgB,CALpB,0BASI,YAAe,CATnB,eAYI,oBAAqB,CAZzB,iBAeI,UAAW,CACX,aFwBU,CEvBX,wBAGC,gBAAiB,CACjB,QAAO,CACP,aF0BY,CExBV,gCACE,uBAAuD,CCzB/D,WACE,eAAgB,CAChB,eAAgB,CAgBjB,yBAlBD,WAKI,QAAO,CACP,gBAAiB,CACjB,YAAe,CAWlB,CJsFC,oBI7FE,kBAAmB,CACnB,UHuCc,CDqDhB,2BIxFE,eAAgB,CChBpB,mBAEE,eAAgB,CAKhB,YAAa,CAPf,+BAKI,YAAe,CAChB,kCAIC,UAAW,CC8Fb,2BD1FE,UAAU,CACV,iBAAkB,CCyFpB,iCDrFE,gBAAiB,CACjB,iBAAkB,CCoFpB,4BDhFE,aEoBU,CFnBV,cAAe,CACf,iBAAkB,CAClB,OAAQ,CAER,oCACE,UEQM,CFPN,wBEwBgB,CCvDtB,WACE,eAAgB,CAChB,eAAgB,CAgBjB,yBAlBD,WAKI,QAAO,CACP,gBAAiB,CACjB,YAAe,CAWlB,CRsFC,oBQ7FE,kBAAmB,CACnB,UPuCc,CDqDhB,2BQxFE,eAAgB,CChBpB,kBAEE,eAAgB,CAChB,YAAa,CAHf,8BAMI,YAAe,CAChB,iCAGC,UAAW,CH8Fb,0BG1FE,UAAU,CACV,iBAAkB,CHyFpB,gCGrFE,gBAAiB,CACjB,iBAAkB,CHoFpB,2BGhFE,aFoBU,CEnBV,cAAe,CACf,iBAAkB,CAClB,OAAQ,CAER,mCACE,UFQM,CEPN,wBFwBgB,CGvDtB,cAEE,eAAgB,CAChB,eAAgB,CAgBjB,uBAbG,kBAAmB,CACnB,UT4Cc,CDqDhB,8BU7FE,eAAgB,CV+FjB,yBU1GH,cAeI,QAAO,CACP,gBAAiB,CACjB,YAAe,CAElB,CCnBD,iBACE,eAAgB,CADlB,6BAII,YAAe,CAChB,wBAGC,aJoCU,CInCV,cAAe,CAEf,gCACE,UJ0BM,CIzBN,wBJ0CgB,CIzCjB,0BAID,eAAgB,CAChB,YAAa,CACb,8BACE,iBAAkB,CACnB,2BAID,aJoBW,CInBX,yBAA0B,CL6E5B,8BKzEE,eAAgB,CAChB,cAAe,CACf,aJOU,CDgEZ,8BKnEE,aJGU,CKxCd,UACE,2CAA8C,CAC9C,cAAe,CACf,wBCmDkB,CDlDlB,UCiCU,CDhCX,aAGC,SAAU,CACV,eAAgB,CAGhB,qBAAmB,CAgBpB,yBArBD,aAQI,SAAU,CAab,CEiHG,0BFtIJ,aAYI,SAAU,CASb,CEuGG,yBF5HJ,sBAkBM,YAAa,CAEhB,CG7BH,EACE,QAAS,CACT,SAAU,CACV,qBAAsB,CACvB,UAGC,UAAW,CACX,WAAY,CACb,EAGC,oBAAqB,CACrB,aAAc,CACf,MAGC,eAAgB,CACjB,OAGC,YAAa","file":"main.ddb1506c.chunk.css","sourcesContent":["body {\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n","@import '../../style/base';\n\n.Profile{\n\n  width: 100%;\n  overflow: hidden;\n  \n  @include mq(md){\n    width: 50%;\n    flex: 1;\n    max-width: 280px;\n  }\n\n  @include e (heading){\n    white-space: nowrap;\n    color: $ash-gray;\n  }\n\n  @include e(avatar){\n    border-radius: 50%;\n    width: 100%;\n  }\n\n  @include e(avatar-container){\n    margin: 0 auto;\n    margin-top: 32px;\n    max-width: 300px;\n  }\n\n  @include e(user-details){\n    margin-top: 40px;\n  }\n\n  @include e(user-id){\n    margin-top: 8px;\n  }\n\n  @include e(user-name){\n    color: $pear;\n    \n    a{\n      &:hover {\n        color: darken($color: $pear, $amount: 20%) !important;\n      }\n    }\n  }\n}","// ==========================================================================\n// Utilities\n// Define functions and mixins at this partial.\n// ==========================================================================\n\n//Font Imports\n\n//Provide url in '$font-url--google' variable from '_config.scss' partial\n@if variable-exists(font-url--google){\n  @import url($font-url--google); // CSS font import from Google CDN\n}\n\n@if variable-exists(typefaces) {\n  @each $file, $option in $typefaces {\n    @font-face {\n      font-family: map-get(map-get($typefaces, $file), family);\n      font-style: map-get(map-get($typefaces, $file), style);\n      font-weight: map-get(map-get($typefaces, $file), weight);\n      src: url('../fonts/#{$file}.ttf') format('truetype'),\n           url('../fonts/#{$file}.woff') format('woff'),\n           url('../fonts/#{$file}.woff2') format('woff2');\n    }\n  }\n}\n\n// Functions\n\n// Add pixel unit\n// $value     - Value for adding px unit\n// @returns   - number\n@function addPxUnit($value){\n  @if unitless($value) {\n    $value: $value * 1px;\n  }\n  @return $value;\n}\n\n// Convert pixels to em\n// $target    - Value to be converted into em\n// $context   - Default: Base font size. Base font size is usually 16px depending on browser default font size\n// @returns   - number\n@function em($target, $context: $base__font-size){\n  $target: addPxUnit($target);\n  $context: addPxUnit($context);\n  @return($target/$context) * 1em;\n}\n\n// Convert pixels to rem\n// $target    - Value to be converted into rem\n// $context   - Default: Base font size. Base font size is usually 16px depending on browser default font size\n// @returns   - number\n@function rem($target, $context: $base__font-size){\n  $target: addPxUnit($target);\n  $context: addPxUnit($context);\n  @return $target/$context * 1rem;\n}\n\n// Convert pixels to percentage\n// $target    - Value to be converted into percentage\n// $context   - Context on which target needs to be relative to for percentage conversion\n// @returns   - number\n@function pntg($target, $context){\n  @return ($target/$context) * 100%;\n}\n\n// Use color palette\n// $palette   - Map required under $palettes map($palettes map is defined under _config.scss partial)\n// $shade     - Key of provide $palette map\n// base       - Default key of $shade under $palette map\n// @returns   - map\n@function palette($palette, $shade: base){\n  @return map-get(map-get($palettes, $palette), $shade);\n}\n\n// Calculate if number is even or not\n// $number    - Number to be verified\n// @returns   - boolean\n@function even($number){\n  @if $number%2 == 0{\n    @return true;\n  }\n  @else{\n    @return false;\n  }\n}\n\n// Mixins\n\n// Map background color to elements\n// $map    - Map containg key value pair for background color\n// $theme  - Key of provided map from $map\n// $color  - Value of provided map from $map\n// @usage  - `.message {@include bg-colors($ui-colors);}`\n@mixin bg-colors($map){\n  @each $theme, $color in $map{\n    &--#{$theme}{\n      background: $color;\n    }\n  }\n}\n\n//BEM(Block Element Modifier) Naming Convention\n// For Element\n// $element  - Just the element name for the parent block (doesn't require the parent Block name)\n// @usage    - `.Nav {@include e(item){...}}`\n@mixin e($element){\n  &__#{$element}{\n    @content;\n  }\n}\n\n// For Modifier\n// $modifier  - Just the modifier name for the parent block or element\n// @usage     - `.Nav {@include e(item) {@include m(active) {...}}}`\n@mixin m($modifier){\n  &--#{$modifier}{\n    @content;\n  }\n}\n\n// Media Queries\n// $break  - RWD break point values, change them in _config.scss. Default: bootstrap grid\n// @usage  - `.Nav {@include mq(sm) {...}}`\n@mixin mq($break){\n  @if $break == \"xs\" {//lowest breakpoint value\n    @content;\n  }\n  @else if $break == \"sm\" {// phone\n    @media(min-width: $sm-device){\n      @content;\n    }\n  }\n  @else if $break == \"md\" {// tablet\n    @media(min-width: $md-device){\n      @content;\n    }\n  }\n  @else if $break == \"lg\" {// laptop and desktop\n    @media(min-width: $lg-device){\n      @content;\n    }\n  }\n  @else if $break == \"xl\" {// High res desktop and TVs\n    @media(min-width: $xl-device){\n      @content;\n    }\n  }\n  @else {\n    @error \"No value could be retrieved for '#{$break}'\";\n  }\n}\n\n// Hover mixin\n// @usage  - `button {@include hover {...}}`\n@mixin hover {\n  &:hover,\n  &:active,\n  &:focus {\n    @extend %hover;\n    @content;\n  }\n}\n\n// Ellipsis mixin\n// $width  - Value of width or max value of cutoff point in px\n// @usage  - `.Text--info {@include ellipsis(120px) {...}}`\n@mixin ellipsis($width){\n  @extend %ellipsis;\n  width : $width;\n}\n\n//Turn px in rem with px fallback\n@mixin rem($size) {\n  font-size: $size; //Fallback in px\n  font-size: calculateRem($size);\n}\n\n// Pseudo element mixin\n// $el         - provide \"before\" or \"after\" string\n// $el-width   - Width for the pseudo element in px\n// $el-height  - Height for the pseudo element in px\n// @usage      - `.dropdown {@include psuedo-el('before') {...}}`\n@mixin psuedo-el($el, $el-width: null, $el-height: null){\n  @if $el == 'before' or $el == 'after'{\n    &:#{$el}{\n      @extend %pseudos;\n      width: $el-width;\n      height: $el-height;\n      @content;\n    }\n  }\n  @else{\n    @warn \"#{$el} is not a valid pseudo-element\";\n  }\n}\n ","// ==========================================================================\n// Config\n// Define variables, maps and fonts at this partial.\n// ==========================================================================\n\n//Enter your Web Address here for print media\n$domain-name: \"www.domain-name.com\";\n\n//Text\n$base__font-size: 16px;\n$base__line: 24px;\n\n//Font Stacks\n\n//$font-url--google : abc;\n\n// $typefaces\n// Configuration of webfonts imports.\n// $typefaces - {map}\n// @family - {string}\n// @weight - {integer} or {keyword} i.e. 800, bold\n// @style - {keyword} i.e. normal, italic\n\n//$typefaces: (\n//  'FILENAME': (\n//    family: 'fontname',\n//    weight: 100,\n//    style: normal,\n//  ),\n//);\n\n$font-family-sans-fallback: 'Arial', sans-serif;\n$font-family-sans: 'Source Sans Pro', 'Helvetica Neue', 'Helvetica', $font-family-sans-fallback;\n$font-family-serif: 'Georgia', 'Cambria', 'Times New Roman', 'Times', serif;\n$font-family-monospace: 'Inconsolata', 'Menlo', 'Consolas', 'Bitstream Vera Sans Mono', 'Courier', monospace;\n$font-family--primary : $font-family-sans;\n$font-family--secondary : $font-family-sans;\n\n//Colors\n$white: #fff;\n$black: #000;\n$red: #D24D57;\n$gray: #c7c7c7;\n$blue: #3A539B;\n$jade: #00b471;\n$pear: #a6e22e;\n$rose: #ec007c;\n$green: #36D7B7;\n$spray: #66d9ef;\n$yellow: #F7CA18;\n$orange: #fd971f;\n$casper: #b8c0d6;\n$purple: #ae81ff;\n$ash-gray: #999999;\n$sunflower: #efe158;\n$light-blue: #009BDE;\n$base-color: #00303e;\n$pacific-blue: #0096c1;\n$almost-white: #F0F2F7;\n\n\n//Message Colors\n$error: lighten($red,5%) !default;\n$success: $green !default;\n$edit: $yellow !default;\n\n//Breakpoints\n$sm-device: 576px;\n$md-device: 768px;\n$lg-device: 1020px;\n$xl-device: 1200px;\n\n//UI Colors\n$ui-colors: (\n  default: $blue,\n  success: $success,\n  error: $error,\n  warning: $edit\n);\n\n//Color Palette\n$palettes: (\n  gray-shades: (\n    base: $gray,\n    dark: darken($gray,20%),\n    light: lighten($gray,20%)\n  ),\n  blue-shades: (\n    base: $blue,\n    dark: darken($blue,20%),\n    light: lighten($blue,20%)\n  )\n);\n\n\n//Font size variables\n$default-font-size: $base__font-size - 2px;\n$small-font-size: $default-font-size - 2px;\n$lg-font-size: $default-font-size + 2px;\n\n//Heading font size vairables\n$heading-line-height: 28px !default;\n$head1-font-size: 26px !default;\n$head2-font-size: $head1-font-size - 4px !default;\n$head3-font-size: $head1-font-size - 8px !default;\n\n//Color Usage\n$primary-color: $white;\n$secondary-color: $black;\n$accent-color: $gray;\n$shadow-color: rgba($black, .2);\n$border-color: $gray;\n$color-text: $black;\n$color-link: $blue;\n\n//Path to Assets\n$path--rel: \"../images\";","@import '../../style/base';\n\n.Socials{\n\n  margin-top: 20px;\n  display: flex;\n  @include e(followers){\n    flex:1;\n  }\n\n  @include e(following){\n    flex:1;\n  }\n\n  .spray{\n    color: $spray;\n    font-size: 16px;\n  }\n\n  a{\n    &:hover{\n      color: lighten($color: $spray, $amount: 20%);\n    }\n  }\n}","@import '../../style/base';\n\n.Contacts{\n\n  margin-top: 40px;\n\n  &>div{\n    margin-top: 10px;\n  }\n\n  &>div:first-child{\n    margin-top: 0px;\n  }\n  span{\n    display: inline-block;\n  }\n  .icons{\n    width: 12px;\n    color: $gray;\n  }\n\n  @include e(text-content){\n    margin-left: 10px;\n    flex: 3;\n    color: $orange;\n    a{\n      &:hover {\n        color: darken($color: $orange, $amount: 20%) !important;\n      }\n    }\n  }  \n}","@import '../../style/base';\n\n.Following{\n  overflow: hidden;\n  margin-top: 40px;\n\n  @include mq(md){\n    flex: 2;\n    margin-left: 60px;\n    margin-top: 0px;\n  }\n\n  @include e (heading){\n    white-space: nowrap;\n    color: $ash-gray;\n  }\n\n  @include e(list-container){\n    margin-top: 32px;\n  }\n}","@import '../../../style/base';\n\n.FollowingListItem{\n\n  margin-top: 48px;\n  \n  &:first-child{\n    margin-top: 0px;\n  }\n  display: flex;\n\n  @include e(avatar-holder){\n    width: 60px;\n  }\n\n  @include e(avatar){\n    width:60px;\n    border-radius: 50%;\n  }\n\n  @include e(user-details){\n    margin-left: 28px;\n    position: relative;\n  }\n\n  @include e(user-id){\n    color: $rose;\n    font-size: 16px;\n    position: absolute;\n    top: 20%;\n\n    a:hover{\n      color: $black;\n      background-color: $pacific-blue;\n    }\n  }\n\n}","// ==========================================================================\n// Utilities\n// Define functions and mixins at this partial.\n// ==========================================================================\n\n//Font Imports\n\n//Provide url in '$font-url--google' variable from '_config.scss' partial\n@if variable-exists(font-url--google){\n  @import url($font-url--google); // CSS font import from Google CDN\n}\n\n@if variable-exists(typefaces) {\n  @each $file, $option in $typefaces {\n    @font-face {\n      font-family: map-get(map-get($typefaces, $file), family);\n      font-style: map-get(map-get($typefaces, $file), style);\n      font-weight: map-get(map-get($typefaces, $file), weight);\n      src: url('../fonts/#{$file}.ttf') format('truetype'),\n           url('../fonts/#{$file}.woff') format('woff'),\n           url('../fonts/#{$file}.woff2') format('woff2');\n    }\n  }\n}\n\n// Functions\n\n// Add pixel unit\n// $value     - Value for adding px unit\n// @returns   - number\n@function addPxUnit($value){\n  @if unitless($value) {\n    $value: $value * 1px;\n  }\n  @return $value;\n}\n\n// Convert pixels to em\n// $target    - Value to be converted into em\n// $context   - Default: Base font size. Base font size is usually 16px depending on browser default font size\n// @returns   - number\n@function em($target, $context: $base__font-size){\n  $target: addPxUnit($target);\n  $context: addPxUnit($context);\n  @return($target/$context) * 1em;\n}\n\n// Convert pixels to rem\n// $target    - Value to be converted into rem\n// $context   - Default: Base font size. Base font size is usually 16px depending on browser default font size\n// @returns   - number\n@function rem($target, $context: $base__font-size){\n  $target: addPxUnit($target);\n  $context: addPxUnit($context);\n  @return $target/$context * 1rem;\n}\n\n// Convert pixels to percentage\n// $target    - Value to be converted into percentage\n// $context   - Context on which target needs to be relative to for percentage conversion\n// @returns   - number\n@function pntg($target, $context){\n  @return ($target/$context) * 100%;\n}\n\n// Use color palette\n// $palette   - Map required under $palettes map($palettes map is defined under _config.scss partial)\n// $shade     - Key of provide $palette map\n// base       - Default key of $shade under $palette map\n// @returns   - map\n@function palette($palette, $shade: base){\n  @return map-get(map-get($palettes, $palette), $shade);\n}\n\n// Calculate if number is even or not\n// $number    - Number to be verified\n// @returns   - boolean\n@function even($number){\n  @if $number%2 == 0{\n    @return true;\n  }\n  @else{\n    @return false;\n  }\n}\n\n// Mixins\n\n// Map background color to elements\n// $map    - Map containg key value pair for background color\n// $theme  - Key of provided map from $map\n// $color  - Value of provided map from $map\n// @usage  - `.message {@include bg-colors($ui-colors);}`\n@mixin bg-colors($map){\n  @each $theme, $color in $map{\n    &--#{$theme}{\n      background: $color;\n    }\n  }\n}\n\n//BEM(Block Element Modifier) Naming Convention\n// For Element\n// $element  - Just the element name for the parent block (doesn't require the parent Block name)\n// @usage    - `.Nav {@include e(item){...}}`\n@mixin e($element){\n  &__#{$element}{\n    @content;\n  }\n}\n\n// For Modifier\n// $modifier  - Just the modifier name for the parent block or element\n// @usage     - `.Nav {@include e(item) {@include m(active) {...}}}`\n@mixin m($modifier){\n  &--#{$modifier}{\n    @content;\n  }\n}\n\n// Media Queries\n// $break  - RWD break point values, change them in _config.scss. Default: bootstrap grid\n// @usage  - `.Nav {@include mq(sm) {...}}`\n@mixin mq($break){\n  @if $break == \"xs\" {//lowest breakpoint value\n    @content;\n  }\n  @else if $break == \"sm\" {// phone\n    @media(min-width: $sm-device){\n      @content;\n    }\n  }\n  @else if $break == \"md\" {// tablet\n    @media(min-width: $md-device){\n      @content;\n    }\n  }\n  @else if $break == \"lg\" {// laptop and desktop\n    @media(min-width: $lg-device){\n      @content;\n    }\n  }\n  @else if $break == \"xl\" {// High res desktop and TVs\n    @media(min-width: $xl-device){\n      @content;\n    }\n  }\n  @else {\n    @error \"No value could be retrieved for '#{$break}'\";\n  }\n}\n\n// Hover mixin\n// @usage  - `button {@include hover {...}}`\n@mixin hover {\n  &:hover,\n  &:active,\n  &:focus {\n    @extend %hover;\n    @content;\n  }\n}\n\n// Ellipsis mixin\n// $width  - Value of width or max value of cutoff point in px\n// @usage  - `.Text--info {@include ellipsis(120px) {...}}`\n@mixin ellipsis($width){\n  @extend %ellipsis;\n  width : $width;\n}\n\n//Turn px in rem with px fallback\n@mixin rem($size) {\n  font-size: $size; //Fallback in px\n  font-size: calculateRem($size);\n}\n\n// Pseudo element mixin\n// $el         - provide \"before\" or \"after\" string\n// $el-width   - Width for the pseudo element in px\n// $el-height  - Height for the pseudo element in px\n// @usage      - `.dropdown {@include psuedo-el('before') {...}}`\n@mixin psuedo-el($el, $el-width: null, $el-height: null){\n  @if $el == 'before' or $el == 'after'{\n    &:#{$el}{\n      @extend %pseudos;\n      width: $el-width;\n      height: $el-height;\n      @content;\n    }\n  }\n  @else{\n    @warn \"#{$el} is not a valid pseudo-element\";\n  }\n}\n ","// ==========================================================================\n// Config\n// Define variables, maps and fonts at this partial.\n// ==========================================================================\n\n//Enter your Web Address here for print media\n$domain-name: \"www.domain-name.com\";\n\n//Text\n$base__font-size: 16px;\n$base__line: 24px;\n\n//Font Stacks\n\n//$font-url--google : abc;\n\n// $typefaces\n// Configuration of webfonts imports.\n// $typefaces - {map}\n// @family - {string}\n// @weight - {integer} or {keyword} i.e. 800, bold\n// @style - {keyword} i.e. normal, italic\n\n//$typefaces: (\n//  'FILENAME': (\n//    family: 'fontname',\n//    weight: 100,\n//    style: normal,\n//  ),\n//);\n\n$font-family-sans-fallback: 'Arial', sans-serif;\n$font-family-sans: 'Source Sans Pro', 'Helvetica Neue', 'Helvetica', $font-family-sans-fallback;\n$font-family-serif: 'Georgia', 'Cambria', 'Times New Roman', 'Times', serif;\n$font-family-monospace: 'Inconsolata', 'Menlo', 'Consolas', 'Bitstream Vera Sans Mono', 'Courier', monospace;\n$font-family--primary : $font-family-sans;\n$font-family--secondary : $font-family-sans;\n\n//Colors\n$white: #fff;\n$black: #000;\n$red: #D24D57;\n$gray: #c7c7c7;\n$blue: #3A539B;\n$jade: #00b471;\n$pear: #a6e22e;\n$rose: #ec007c;\n$green: #36D7B7;\n$spray: #66d9ef;\n$yellow: #F7CA18;\n$orange: #fd971f;\n$casper: #b8c0d6;\n$purple: #ae81ff;\n$ash-gray: #999999;\n$sunflower: #efe158;\n$light-blue: #009BDE;\n$base-color: #00303e;\n$pacific-blue: #0096c1;\n$almost-white: #F0F2F7;\n\n\n//Message Colors\n$error: lighten($red,5%) !default;\n$success: $green !default;\n$edit: $yellow !default;\n\n//Breakpoints\n$sm-device: 576px;\n$md-device: 768px;\n$lg-device: 1020px;\n$xl-device: 1200px;\n\n//UI Colors\n$ui-colors: (\n  default: $blue,\n  success: $success,\n  error: $error,\n  warning: $edit\n);\n\n//Color Palette\n$palettes: (\n  gray-shades: (\n    base: $gray,\n    dark: darken($gray,20%),\n    light: lighten($gray,20%)\n  ),\n  blue-shades: (\n    base: $blue,\n    dark: darken($blue,20%),\n    light: lighten($blue,20%)\n  )\n);\n\n\n//Font size variables\n$default-font-size: $base__font-size - 2px;\n$small-font-size: $default-font-size - 2px;\n$lg-font-size: $default-font-size + 2px;\n\n//Heading font size vairables\n$heading-line-height: 28px !default;\n$head1-font-size: 26px !default;\n$head2-font-size: $head1-font-size - 4px !default;\n$head3-font-size: $head1-font-size - 8px !default;\n\n//Color Usage\n$primary-color: $white;\n$secondary-color: $black;\n$accent-color: $gray;\n$shadow-color: rgba($black, .2);\n$border-color: $gray;\n$color-text: $black;\n$color-link: $blue;\n\n//Path to Assets\n$path--rel: \"../images\";","@import '../../style/base';\n\n.Followers{\n  overflow: hidden;\n  margin-top: 40px;\n\n  @include mq(md){\n    flex: 2;\n    margin-left: 60px;\n    margin-top: 0px;\n  }\n\n  @include e (heading){\n    white-space: nowrap;\n    color: $ash-gray;\n  }\n\n  @include e(list-container){\n    margin-top: 32px;\n  }\n}","@import '../../../style/base';\n\n.FollowerListItem{\n\n  margin-top: 48px;\n  display: flex;\n\n  &:first-child{\n    margin-top: 0px;\n  }\n\n  @include e(avatar-holder){\n    width: 60px;\n  }\n\n  @include e(avatar){\n    width:60px;\n    border-radius: 50%;\n  }\n\n  @include e(user-details){\n    margin-left: 28px;\n    position: relative;\n  }\n\n  @include e(user-id){\n    color: $rose;\n    font-size: 16px;\n    position: absolute;\n    top: 20%;\n\n    a:hover{\n      color: $black;\n      background-color: $pacific-blue;\n    }\n  }\n\n}","@import '../../style/base';\n\n.Repositories{\n  \n  overflow: hidden;\n  margin-top: 40px;\n\n  @include e (heading){\n    white-space: nowrap;\n    color: $ash-gray;\n  }\n\n  @include e(list-container){\n    margin-top: 32px;\n  }\n\n  @include mq(md){\n    flex: 2;\n    margin-left: 60px;\n    margin-top: 0px;\n  }\n}","@import '../../../style/base';\n\n.Repository-list{\n  margin-top: 64px;\n\n  &:first-child{\n    margin-top: 0px;\n  }\n\n  @include e(title){\n    color: $rose;\n    font-size: 18px;\n\n    a:hover{\n      color: $black;\n      background-color: $pacific-blue;\n    }\n  }\n\n  @include e(details){\n    margin-top: 13px;\n    display: flex;\n    &>div{\n      margin-right: 20px;\n    }\n  }\n\n  @include e(language){\n    color: $spray;\n    text-transform: capitalize;\n  }\n\n  @include e(description){\n    margin-top: 10px;\n    font-size: 13px;\n    color: $gray;\n  }\n\n  @include e(update-time){\n    color: $gray;\n  }\n\n}","@import './base';\n\nhtml,body{\n  font-family: 'Conso', 'Courier New', monospace;\n  font-size: 14px;\n  background-color: $base-color;\n  color: $white;\n}\n\n.MainWrapper{\n  width: 90%;\n  max-width: 800px;\n  margin: 0 auto;\n  margin-top: 60px;\n  margin-bottom: 40px;\n\n  @include mq(md){\n    width: 80%;\n  }\n\n  @include mq(xl){\n    width: 50%;\n  }\n  \n  .Content{\n    \n    @include mq(md){\n      display: flex;\n    }\n  }\n}\n\n","// ==========================================================================\n// Config\n// Define variables, maps and fonts at this partial.\n// ==========================================================================\n\n//Enter your Web Address here for print media\n$domain-name: \"www.domain-name.com\";\n\n//Text\n$base__font-size: 16px;\n$base__line: 24px;\n\n//Font Stacks\n\n//$font-url--google : abc;\n\n// $typefaces\n// Configuration of webfonts imports.\n// $typefaces - {map}\n// @family - {string}\n// @weight - {integer} or {keyword} i.e. 800, bold\n// @style - {keyword} i.e. normal, italic\n\n//$typefaces: (\n//  'FILENAME': (\n//    family: 'fontname',\n//    weight: 100,\n//    style: normal,\n//  ),\n//);\n\n$font-family-sans-fallback: 'Arial', sans-serif;\n$font-family-sans: 'Source Sans Pro', 'Helvetica Neue', 'Helvetica', $font-family-sans-fallback;\n$font-family-serif: 'Georgia', 'Cambria', 'Times New Roman', 'Times', serif;\n$font-family-monospace: 'Inconsolata', 'Menlo', 'Consolas', 'Bitstream Vera Sans Mono', 'Courier', monospace;\n$font-family--primary : $font-family-sans;\n$font-family--secondary : $font-family-sans;\n\n//Colors\n$white: #fff;\n$black: #000;\n$red: #D24D57;\n$gray: #c7c7c7;\n$blue: #3A539B;\n$jade: #00b471;\n$pear: #a6e22e;\n$rose: #ec007c;\n$green: #36D7B7;\n$spray: #66d9ef;\n$yellow: #F7CA18;\n$orange: #fd971f;\n$casper: #b8c0d6;\n$purple: #ae81ff;\n$ash-gray: #999999;\n$sunflower: #efe158;\n$light-blue: #009BDE;\n$base-color: #00303e;\n$pacific-blue: #0096c1;\n$almost-white: #F0F2F7;\n\n\n//Message Colors\n$error: lighten($red,5%) !default;\n$success: $green !default;\n$edit: $yellow !default;\n\n//Breakpoints\n$sm-device: 576px;\n$md-device: 768px;\n$lg-device: 1020px;\n$xl-device: 1200px;\n\n//UI Colors\n$ui-colors: (\n  default: $blue,\n  success: $success,\n  error: $error,\n  warning: $edit\n);\n\n//Color Palette\n$palettes: (\n  gray-shades: (\n    base: $gray,\n    dark: darken($gray,20%),\n    light: lighten($gray,20%)\n  ),\n  blue-shades: (\n    base: $blue,\n    dark: darken($blue,20%),\n    light: lighten($blue,20%)\n  )\n);\n\n\n//Font size variables\n$default-font-size: $base__font-size - 2px;\n$small-font-size: $default-font-size - 2px;\n$lg-font-size: $default-font-size + 2px;\n\n//Heading font size vairables\n$heading-line-height: 28px !default;\n$head1-font-size: 26px !default;\n$head2-font-size: $head1-font-size - 4px !default;\n$head3-font-size: $head1-font-size - 8px !default;\n\n//Color Usage\n$primary-color: $white;\n$secondary-color: $black;\n$accent-color: $gray;\n$shadow-color: rgba($black, .2);\n$border-color: $gray;\n$color-text: $black;\n$color-link: $blue;\n\n//Path to Assets\n$path--rel: \"../images\";","// ==========================================================================\n// Utilities\n// Define functions and mixins at this partial.\n// ==========================================================================\n\n//Font Imports\n\n//Provide url in '$font-url--google' variable from '_config.scss' partial\n@if variable-exists(font-url--google){\n  @import url($font-url--google); // CSS font import from Google CDN\n}\n\n@if variable-exists(typefaces) {\n  @each $file, $option in $typefaces {\n    @font-face {\n      font-family: map-get(map-get($typefaces, $file), family);\n      font-style: map-get(map-get($typefaces, $file), style);\n      font-weight: map-get(map-get($typefaces, $file), weight);\n      src: url('../fonts/#{$file}.ttf') format('truetype'),\n           url('../fonts/#{$file}.woff') format('woff'),\n           url('../fonts/#{$file}.woff2') format('woff2');\n    }\n  }\n}\n\n// Functions\n\n// Add pixel unit\n// $value     - Value for adding px unit\n// @returns   - number\n@function addPxUnit($value){\n  @if unitless($value) {\n    $value: $value * 1px;\n  }\n  @return $value;\n}\n\n// Convert pixels to em\n// $target    - Value to be converted into em\n// $context   - Default: Base font size. Base font size is usually 16px depending on browser default font size\n// @returns   - number\n@function em($target, $context: $base__font-size){\n  $target: addPxUnit($target);\n  $context: addPxUnit($context);\n  @return($target/$context) * 1em;\n}\n\n// Convert pixels to rem\n// $target    - Value to be converted into rem\n// $context   - Default: Base font size. Base font size is usually 16px depending on browser default font size\n// @returns   - number\n@function rem($target, $context: $base__font-size){\n  $target: addPxUnit($target);\n  $context: addPxUnit($context);\n  @return $target/$context * 1rem;\n}\n\n// Convert pixels to percentage\n// $target    - Value to be converted into percentage\n// $context   - Context on which target needs to be relative to for percentage conversion\n// @returns   - number\n@function pntg($target, $context){\n  @return ($target/$context) * 100%;\n}\n\n// Use color palette\n// $palette   - Map required under $palettes map($palettes map is defined under _config.scss partial)\n// $shade     - Key of provide $palette map\n// base       - Default key of $shade under $palette map\n// @returns   - map\n@function palette($palette, $shade: base){\n  @return map-get(map-get($palettes, $palette), $shade);\n}\n\n// Calculate if number is even or not\n// $number    - Number to be verified\n// @returns   - boolean\n@function even($number){\n  @if $number%2 == 0{\n    @return true;\n  }\n  @else{\n    @return false;\n  }\n}\n\n// Mixins\n\n// Map background color to elements\n// $map    - Map containg key value pair for background color\n// $theme  - Key of provided map from $map\n// $color  - Value of provided map from $map\n// @usage  - `.message {@include bg-colors($ui-colors);}`\n@mixin bg-colors($map){\n  @each $theme, $color in $map{\n    &--#{$theme}{\n      background: $color;\n    }\n  }\n}\n\n//BEM(Block Element Modifier) Naming Convention\n// For Element\n// $element  - Just the element name for the parent block (doesn't require the parent Block name)\n// @usage    - `.Nav {@include e(item){...}}`\n@mixin e($element){\n  &__#{$element}{\n    @content;\n  }\n}\n\n// For Modifier\n// $modifier  - Just the modifier name for the parent block or element\n// @usage     - `.Nav {@include e(item) {@include m(active) {...}}}`\n@mixin m($modifier){\n  &--#{$modifier}{\n    @content;\n  }\n}\n\n// Media Queries\n// $break  - RWD break point values, change them in _config.scss. Default: bootstrap grid\n// @usage  - `.Nav {@include mq(sm) {...}}`\n@mixin mq($break){\n  @if $break == \"xs\" {//lowest breakpoint value\n    @content;\n  }\n  @else if $break == \"sm\" {// phone\n    @media(min-width: $sm-device){\n      @content;\n    }\n  }\n  @else if $break == \"md\" {// tablet\n    @media(min-width: $md-device){\n      @content;\n    }\n  }\n  @else if $break == \"lg\" {// laptop and desktop\n    @media(min-width: $lg-device){\n      @content;\n    }\n  }\n  @else if $break == \"xl\" {// High res desktop and TVs\n    @media(min-width: $xl-device){\n      @content;\n    }\n  }\n  @else {\n    @error \"No value could be retrieved for '#{$break}'\";\n  }\n}\n\n// Hover mixin\n// @usage  - `button {@include hover {...}}`\n@mixin hover {\n  &:hover,\n  &:active,\n  &:focus {\n    @extend %hover;\n    @content;\n  }\n}\n\n// Ellipsis mixin\n// $width  - Value of width or max value of cutoff point in px\n// @usage  - `.Text--info {@include ellipsis(120px) {...}}`\n@mixin ellipsis($width){\n  @extend %ellipsis;\n  width : $width;\n}\n\n//Turn px in rem with px fallback\n@mixin rem($size) {\n  font-size: $size; //Fallback in px\n  font-size: calculateRem($size);\n}\n\n// Pseudo element mixin\n// $el         - provide \"before\" or \"after\" string\n// $el-width   - Width for the pseudo element in px\n// $el-height  - Height for the pseudo element in px\n// @usage      - `.dropdown {@include psuedo-el('before') {...}}`\n@mixin psuedo-el($el, $el-width: null, $el-height: null){\n  @if $el == 'before' or $el == 'after'{\n    &:#{$el}{\n      @extend %pseudos;\n      width: $el-width;\n      height: $el-height;\n      @content;\n    }\n  }\n  @else{\n    @warn \"#{$el} is not a valid pseudo-element\";\n  }\n}\n ","*{\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nhtml, body{\n  width: 100%;\n  height: 100%;\n}\n\na{\n  text-decoration: none;\n  color: inherit;\n}\n\nul li{\n  list-style: none;  \n}\n\n*:focus {\n  outline: none;\n}"]}